// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("udp_bpf")
            .map("xsks_map", false)
            .map("udp_bpf.rodata", false)
            .prog("udp_capture");
        builder.build()
    }
    pub struct OpenUdpMaps<'obj> {
        pub xsks_map: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenUdpMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut xsks_map = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "xsks_map" => xsks_map = Some(map),
                    "udp_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                xsks_map: xsks_map.expect("map `xsks_map` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct UdpMaps<'obj> {
        pub xsks_map: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> UdpMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut xsks_map = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "xsks_map" => xsks_map = Some(map),
                    "udp_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                xsks_map: xsks_map.expect("map `xsks_map` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenUdpProgs<'obj> {
        pub udp_capture: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenUdpProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut udp_capture = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "udp_capture" => udp_capture = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                udp_capture: udp_capture.expect("prog `udp_capture` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct UdpProgs<'obj> {
        pub udp_capture: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> UdpProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenUdpProgs<'obj>) -> Self {
            Self {
                udp_capture: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.udp_capture.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct UdpSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> UdpSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenUdpSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenUdpSkel {
                maps: unsafe { OpenUdpMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenUdpProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for UdpSkelBuilder {
        type Output = OpenUdpSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenUdpSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenUdpSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 17],
            pub key_size: *mut [i32; 4],
            pub value_size: *mut [i32; 4],
            pub max_entries: *mut [i32; 64],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct xdp_md {
            pub data: u32,
            pub data_end: u32,
            pub data_meta: u32,
            pub ingress_ifindex: u32,
            pub rx_queue_index: u32,
            pub egress_ifindex: u32,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub xsks_map: __anon_1,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub _license: [i8; 4],
        }
    }
    pub struct OpenUdpSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenUdpMaps<'obj>,
        pub progs: OpenUdpProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenUdpSkel<'obj> {
        type Output = UdpSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<UdpSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(UdpSkel {
                maps: unsafe { UdpMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: UdpProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: UdpLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct UdpLinks {
        pub udp_capture: Option<libbpf_rs::Link>,
    }
    pub struct UdpSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: UdpMaps<'obj>,
        pub progs: UdpProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: UdpLinks,
    }

    unsafe impl Send for UdpSkel<'_> {}
    unsafe impl Sync for UdpSkel<'_> {}

    impl<'obj> Skel<'obj> for UdpSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = UdpLinks {
                udp_capture: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl UdpSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 10, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 120, 100, 112, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 109, 97, 112, 115, 0, 108,
        105, 99, 101, 110, 115, 101, 0, 117, 100, 112, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48,
        95, 49, 48, 0, 117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102,
        109, 116, 0, 117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102,
        109, 116, 46, 49, 0, 117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95,
        95, 102, 109, 116, 46, 50, 0, 76, 66, 66, 48, 95, 55, 0, 117, 100, 112, 95, 99, 97, 112,
        116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 51, 0, 117, 100, 112, 95, 99,
        97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 52, 0, 117, 100, 112,
        95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 53, 0, 117,
        100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 0, 120, 115, 107, 115, 95, 109, 97, 112, 0,
        95, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 101, 108, 120, 100, 112, 0, 46, 66, 84,
        70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 3, 0, 96, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
        0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 1, 0, 4,
        0, 19, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 1, 0, 4, 0, 27, 0, 0, 0,
        0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 3, 0, 112, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 1, 0, 4, 0, 49, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0,
        0, 0, 154, 0, 0, 0, 1, 0, 4, 0, 77, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 176, 0,
        0, 0, 1, 0, 4, 0, 94, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 88, 2, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
        0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
        0, 191, 22, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 2, 0, 0, 0, 97, 103, 4, 0, 0, 0, 0, 0, 97, 104,
        0, 0, 0, 0, 0, 0, 191, 137, 0, 0, 0, 0, 0, 0, 7, 9, 0, 0, 14, 0, 0, 0, 61, 121, 37, 0, 0,
        0, 0, 0, 191, 115, 0, 0, 0, 0, 0, 0, 31, 131, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 19, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 19,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 8, 0, 0, 0, 191, 131, 0, 0, 0, 0, 0, 0, 133,
        0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 22, 0,
        0, 0, 191, 147, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 3, 0, 0, 2, 0, 0, 0, 113,
        129, 13, 0, 0, 0, 0, 0, 103, 1, 0, 0, 8, 0, 0, 0, 113, 130, 12, 0, 0, 0, 0, 0, 79, 33, 0,
        0, 0, 0, 0, 0, 85, 1, 15, 0, 8, 0, 0, 0, 191, 129, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 34, 0, 0,
        0, 61, 113, 12, 0, 0, 0, 0, 0, 113, 129, 23, 0, 0, 0, 0, 0, 85, 1, 10, 0, 17, 0, 0, 0, 191,
        129, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 42, 0, 0, 0, 45, 113, 7, 0, 0, 0, 0, 0, 105, 131, 36, 0,
        0, 0, 0, 0, 21, 3, 7, 0, 4, 1, 0, 0, 24, 1, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        2, 0, 0, 28, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 3, 0, 0, 1, 0, 0, 0, 191, 48, 0, 0, 0,
        0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        2, 0, 0, 17, 0, 0, 0, 183, 3, 0, 0, 1, 4, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 191, 97, 0, 0, 0,
        0, 0, 0, 24, 2, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 54, 0, 0,
        0, 183, 3, 0, 0, 2, 0, 0, 0, 103, 0, 0, 0, 32, 0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 85, 0,
        241, 255, 0, 0, 0, 0, 97, 97, 0, 0, 0, 0, 0, 0, 97, 98, 8, 0, 0, 0, 0, 0, 7, 2, 0, 0, 8, 0,
        0, 0, 45, 18, 237, 255, 0, 0, 0, 0, 97, 99, 16, 0, 0, 0, 0, 0, 24, 1, 0, 0, 94, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 22, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 97, 98, 16, 0, 0,
        0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 2, 0, 0, 0, 133, 0,
        0, 0, 51, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0, 0, 5, 0, 225, 255, 0, 0, 0, 0, 100, 97, 116, 97,
        32, 101, 110, 100, 32, 45, 32, 100, 97, 116, 97, 32, 37, 100, 0, 100, 97, 116, 97, 32, 37,
        100, 0, 100, 97, 116, 97, 32, 43, 32, 101, 116, 104, 104, 100, 114, 32, 115, 105, 122, 101,
        32, 37, 100, 0, 98, 121, 32, 112, 97, 115, 115, 105, 110, 103, 32, 117, 100, 112, 32, 100,
        101, 115, 116, 32, 112, 111, 114, 116, 32, 37, 100, 0, 117, 100, 112, 32, 100, 101, 115,
        116, 32, 112, 111, 114, 116, 32, 37, 100, 0, 114, 120, 95, 113, 117, 101, 117, 101, 95,
        105, 110, 100, 101, 120, 120, 120, 120, 120, 32, 37, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 80, 76,
        0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 11, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 56, 1, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 112, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 0, 2,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 40, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0,
        0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 20, 3, 0, 0, 20, 3, 0, 0, 251, 4, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0,
        0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0,
        25, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 39, 0, 0, 0, 5,
        0, 0, 0, 128, 0, 0, 0, 50, 0, 0, 0, 7, 0, 0, 0, 192, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 14, 9,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 0, 0, 0, 71, 0, 0, 0, 6, 0, 0, 4, 24, 0,
        0, 0, 78, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 13, 0, 0, 0, 32, 0, 0, 0, 92, 0,
        0, 0, 13, 0, 0, 0, 64, 0, 0, 0, 102, 0, 0, 0, 13, 0, 0, 0, 96, 0, 0, 0, 118, 0, 0, 0, 13,
        0, 0, 0, 128, 0, 0, 0, 133, 0, 0, 0, 13, 0, 0, 0, 160, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 8,
        14, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2,
        0, 0, 0, 167, 0, 0, 0, 11, 0, 0, 0, 171, 0, 0, 0, 1, 0, 0, 12, 15, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 10, 18, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 19, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 14, 19, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0,
        208, 0, 0, 0, 0, 0, 0, 14, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17,
        0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 14, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 28, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0,
        14, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0,
        17, 0, 0, 0, 18, 1, 0, 0, 0, 0, 0, 14, 27, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 0, 14,
        23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 18, 0, 0, 0, 4, 0, 0, 0, 4, 0,
        0, 0, 62, 1, 0, 0, 0, 0, 0, 14, 30, 0, 0, 0, 1, 0, 0, 0, 225, 4, 0, 0, 6, 0, 0, 15, 116, 0,
        0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 22, 0, 0, 0, 19, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0,
        0, 27, 0, 0, 0, 22, 0, 0, 0, 26, 0, 0, 0, 49, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 77, 0, 0,
        0, 17, 0, 0, 0, 29, 0, 0, 0, 94, 0, 0, 0, 22, 0, 0, 0, 233, 4, 0, 0, 1, 0, 0, 15, 32, 0, 0,
        0, 10, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 239, 4, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 31, 0, 0,
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90,
        69, 95, 84, 89, 80, 69, 95, 95, 0, 116, 121, 112, 101, 0, 107, 101, 121, 95, 115, 105, 122,
        101, 0, 118, 97, 108, 117, 101, 95, 115, 105, 122, 101, 0, 109, 97, 120, 95, 101, 110, 116,
        114, 105, 101, 115, 0, 120, 115, 107, 115, 95, 109, 97, 112, 0, 120, 100, 112, 95, 109,
        100, 0, 100, 97, 116, 97, 0, 100, 97, 116, 97, 95, 101, 110, 100, 0, 100, 97, 116, 97, 95,
        109, 101, 116, 97, 0, 105, 110, 103, 114, 101, 115, 115, 95, 105, 102, 105, 110, 100, 101,
        120, 0, 114, 120, 95, 113, 117, 101, 117, 101, 95, 105, 110, 100, 101, 120, 0, 101, 103,
        114, 101, 115, 115, 95, 105, 102, 105, 110, 100, 101, 120, 0, 95, 95, 117, 51, 50, 0, 117,
        110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 99, 116, 120, 0, 117, 100, 112,
        95, 99, 97, 112, 116, 117, 114, 101, 0, 99, 104, 97, 114, 0, 117, 100, 112, 95, 99, 97,
        112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 0, 117, 100, 112, 95, 99, 97,
        112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 117, 100, 112, 95,
        99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 50, 0, 117, 100,
        112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46, 51, 0,
        117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46,
        52, 0, 117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 46, 95, 95, 95, 95, 102, 109,
        116, 46, 53, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 47, 104, 111, 109, 101, 47, 108,
        101, 111, 110, 97, 114, 100, 111, 45, 98, 111, 114, 103, 101, 115, 47, 112, 114, 111, 106,
        101, 99, 116, 115, 47, 120, 100, 112, 45, 114, 115, 47, 117, 100, 112, 114, 101, 100, 105,
        114, 101, 99, 116, 47, 115, 114, 99, 47, 98, 112, 102, 47, 117, 100, 112, 46, 98, 112, 102,
        46, 99, 0, 105, 110, 116, 32, 117, 100, 112, 95, 99, 97, 112, 116, 117, 114, 101, 40, 115,
        116, 114, 117, 99, 116, 32, 120, 100, 112, 95, 109, 100, 32, 42, 99, 116, 120, 41, 32, 123,
        0, 32, 32, 100, 97, 116, 97, 95, 101, 110, 100, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42,
        41, 40, 108, 111, 110, 103, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97, 95, 101, 110, 100,
        59, 0, 32, 32, 100, 97, 116, 97, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 108,
        111, 110, 103, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97, 59, 0, 32, 32, 105, 102, 32, 40,
        100, 97, 116, 97, 32, 43, 32, 115, 105, 122, 101, 111, 102, 40, 115, 116, 114, 117, 99,
        116, 32, 101, 116, 104, 104, 100, 114, 41, 32, 60, 32, 100, 97, 116, 97, 95, 101, 110, 100,
        41, 32, 123, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34,
        100, 97, 116, 97, 32, 101, 110, 100, 32, 45, 32, 100, 97, 116, 97, 32, 37, 100, 34, 44, 32,
        100, 97, 116, 97, 95, 101, 110, 100, 32, 45, 32, 100, 97, 116, 97, 41, 59, 0, 32, 32, 32,
        32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 100, 97, 116, 97, 32, 37, 100,
        34, 44, 32, 100, 97, 116, 97, 41, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105,
        110, 116, 107, 40, 34, 100, 97, 116, 97, 32, 43, 32, 101, 116, 104, 104, 100, 114, 32, 115,
        105, 122, 101, 32, 37, 100, 34, 44, 32, 100, 97, 116, 97, 32, 43, 32, 110, 104, 95, 111,
        102, 102, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 101, 116, 104, 45, 62, 104, 95, 112,
        114, 111, 116, 111, 32, 61, 61, 32, 98, 112, 102, 95, 104, 116, 111, 110, 115, 40, 69, 84,
        72, 95, 80, 95, 73, 80, 41, 41, 32, 123, 0, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40,
        118, 111, 105, 100, 32, 42, 41, 40, 105, 112, 104, 32, 43, 32, 49, 41, 32, 60, 32, 100, 97,
        116, 97, 95, 101, 110, 100, 32, 38, 38, 32, 105, 112, 104, 45, 62, 112, 114, 111, 116, 111,
        99, 111, 108, 32, 61, 61, 32, 73, 80, 80, 82, 79, 84, 79, 95, 85, 68, 80, 41, 0, 32, 32,
        105, 102, 32, 40, 117, 100, 112, 45, 62, 100, 101, 115, 116, 32, 33, 61, 32, 104, 116, 111,
        110, 115, 40, 49, 48, 50, 53, 41, 41, 32, 123, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112,
        114, 105, 110, 116, 107, 40, 34, 98, 121, 32, 112, 97, 115, 115, 105, 110, 103, 32, 117,
        100, 112, 32, 100, 101, 115, 116, 32, 112, 111, 114, 116, 32, 37, 100, 34, 44, 32, 117,
        100, 112, 45, 62, 100, 101, 115, 116, 41, 59, 0, 125, 0, 32, 32, 98, 112, 102, 95, 112,
        114, 105, 110, 116, 107, 40, 34, 117, 100, 112, 32, 100, 101, 115, 116, 32, 112, 111, 114,
        116, 32, 37, 100, 34, 44, 32, 104, 116, 111, 110, 115, 40, 117, 100, 112, 45, 62, 100, 101,
        115, 116, 41, 41, 59, 0, 32, 32, 101, 114, 114, 32, 61, 32, 98, 112, 102, 95, 120, 100,
        112, 95, 97, 100, 106, 117, 115, 116, 95, 109, 101, 116, 97, 40, 99, 116, 120, 44, 32, 45,
        40, 105, 110, 116, 41, 115, 105, 122, 101, 111, 102, 40, 115, 116, 114, 117, 99, 116, 32,
        120, 100, 112, 95, 109, 101, 116, 97, 41, 41, 59, 0, 32, 32, 105, 102, 32, 40, 101, 114,
        114, 41, 0, 32, 32, 100, 97, 116, 97, 95, 109, 101, 116, 97, 32, 61, 32, 40, 118, 111, 105,
        100, 32, 42, 41, 40, 108, 111, 110, 103, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97, 95,
        109, 101, 116, 97, 59, 0, 32, 32, 105, 102, 32, 40, 40, 118, 111, 105, 100, 32, 42, 41, 40,
        109, 101, 116, 97, 32, 43, 32, 49, 41, 32, 62, 32, 100, 97, 116, 97, 41, 0, 32, 32, 98,
        112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 114, 120, 95, 113, 117, 101, 117, 101,
        95, 105, 110, 100, 101, 120, 120, 120, 120, 120, 32, 37, 100, 34, 44, 32, 99, 116, 120, 45,
        62, 114, 120, 95, 113, 117, 101, 117, 101, 95, 105, 110, 100, 101, 120, 41, 59, 0, 32, 32,
        114, 101, 116, 117, 114, 110, 32, 98, 112, 102, 95, 114, 101, 100, 105, 114, 101, 99, 116,
        95, 109, 97, 112, 40, 38, 120, 115, 107, 115, 95, 109, 97, 112, 44, 32, 99, 116, 120, 45,
        62, 114, 120, 95, 113, 117, 101, 117, 101, 95, 105, 110, 100, 101, 120, 44, 32, 88, 68, 80,
        95, 80, 65, 83, 83, 41, 59, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 109, 97, 112, 115, 0,
        108, 105, 99, 101, 110, 115, 101, 0, 120, 100, 112, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0,
        0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 172, 1, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 247,
        4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 247, 4, 0, 0, 26, 0, 0, 0, 0, 0,
        0, 0, 71, 1, 0, 0, 139, 1, 0, 0, 0, 104, 0, 0, 16, 0, 0, 0, 71, 1, 0, 0, 177, 1, 0, 0, 33,
        176, 0, 0, 24, 0, 0, 0, 71, 1, 0, 0, 219, 1, 0, 0, 29, 172, 0, 0, 32, 0, 0, 0, 71, 1, 0, 0,
        253, 1, 0, 0, 12, 204, 0, 0, 48, 0, 0, 0, 71, 1, 0, 0, 253, 1, 0, 0, 7, 204, 0, 0, 56, 0,
        0, 0, 71, 1, 0, 0, 46, 2, 0, 0, 5, 208, 0, 0, 104, 0, 0, 0, 71, 1, 0, 0, 101, 2, 0, 0, 5,
        212, 0, 0, 144, 0, 0, 0, 71, 1, 0, 0, 134, 2, 0, 0, 5, 216, 0, 0, 192, 0, 0, 0, 71, 1, 0,
        0, 190, 2, 0, 0, 14, 236, 0, 0, 224, 0, 0, 0, 71, 1, 0, 0, 190, 2, 0, 0, 9, 236, 0, 0, 0,
        1, 0, 0, 71, 1, 0, 0, 237, 2, 0, 0, 48, 248, 0, 0, 8, 1, 0, 0, 71, 1, 0, 0, 237, 2, 0, 0,
        11, 248, 0, 0, 40, 1, 0, 0, 71, 1, 0, 0, 53, 3, 0, 0, 12, 36, 1, 0, 48, 1, 0, 0, 71, 1, 0,
        0, 53, 3, 0, 0, 7, 36, 1, 0, 56, 1, 0, 0, 71, 1, 0, 0, 87, 3, 0, 0, 5, 40, 1, 0, 96, 1, 0,
        0, 71, 1, 0, 0, 145, 3, 0, 0, 1, 112, 1, 0, 112, 1, 0, 0, 71, 1, 0, 0, 147, 3, 0, 0, 3, 52,
        1, 0, 152, 1, 0, 0, 71, 1, 0, 0, 199, 3, 0, 0, 9, 60, 1, 0, 208, 1, 0, 0, 71, 1, 0, 0, 8,
        4, 0, 0, 7, 64, 1, 0, 216, 1, 0, 0, 71, 1, 0, 0, 219, 1, 0, 0, 29, 76, 1, 0, 224, 1, 0, 0,
        71, 1, 0, 0, 19, 4, 0, 0, 34, 80, 1, 0, 232, 1, 0, 0, 71, 1, 0, 0, 63, 4, 0, 0, 21, 92, 1,
        0, 240, 1, 0, 0, 71, 1, 0, 0, 63, 4, 0, 0, 7, 92, 1, 0, 248, 1, 0, 0, 71, 1, 0, 0, 96, 4,
        0, 0, 3, 104, 1, 0, 32, 2, 0, 0, 71, 1, 0, 0, 156, 4, 0, 0, 43, 108, 1, 0, 40, 2, 0, 0, 71,
        1, 0, 0, 156, 4, 0, 0, 10, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0,
        1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 88,
        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 21, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
        0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 29, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        120, 5, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 152, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 5, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
        0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 6, 0, 0, 0, 0, 0, 0, 39, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 14, 0, 0, 0, 0, 0, 0, 224,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0,
    ];
}
